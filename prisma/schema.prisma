// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Models

model Workflow {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  description String?

  editorObjectJSON String
  status     WorkflowStatusEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executions WorkflowExecution[]

  // User cannot have two workflows with the same name
  @@unique([name, userId])
}


model WorkflowExecution {
  id String @id @default(auto()) @map("_id")  @db.ObjectId
  workflowId String @db.ObjectId
  userId String
  trigger String
  status WorkflowExecutionStatusEnum

  
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  phases ExecutionPhase[]
  
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime? 
}

model ExecutionPhase {
  id String @id @default(auto()) @map("_id")  @db.ObjectId
  userId String
  status ExecutionPhaseStatusEnum 
  nodeId String
  taskName String
  inputs String?
  outputs String? 

  number Int 
  creditsCost Int?

  workflowExecutionId String?  @db.ObjectId
  execution WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  startedAt DateTime?
  completedAt DateTime?

}


// Enums
enum WorkflowStatusEnum {
  DRAFT
  PUBLISHED
}

enum WorkflowExecutionStatusEnum {
  PENDING
  RUNNNING
  COMPLETED 
  FAILED
}

enum ExecutionPhaseStatusEnum {
  CREATED
  PENDING
  RUNNNING
  COMPLETED 
  FAILED
}

enum WorkflowExecutionTriggerEnum {
  MANUAL
}